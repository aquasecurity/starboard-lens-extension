import {K8sApi} from "@k8slens/extensions";

export class Vulnerability {
    vulnerabilityID: string;
    title?: string;
    resource: string;
    installedVersion: string;
    fixedVersion?: string;
    severity: string;
    links?: string[];

    constructor(params: Vulnerability) {
        Object.entries(params).forEach(([key, value]) => {
            Object.assign(this, { [key]: value })
        });
    }

    getId() {
        return this.vulnerabilityID
    }

    getName() {
        return this.title
    }
}

export class VulnerabilityReport extends K8sApi.KubeObject {
    static kind = "VulnerabilityReport"
    static namespaced = true
    static apiBase = "/apis/aquasecurity.github.io/v1alpha1/vulnerabilityreports"

    kind: string
    apiVersion: string
    metadata: {
        name: string;
        namespace: string;
        selfLink: string;
        uid: string;
        resourceVersion: string;
        creationTimestamp: string;
        labels: {
            [key: string]: string;
        };
        annotations: {
            [key: string]: string;
        };
    }

    report: {
        updateTimestamp: string;
        registry: {
            server: string;
        }
        artifact: {
            repository: string;
            tag?: string;
            digest?: string;
        }
        scanner: {
            name: string;
            vendor: string;
            version: string;
        }
        summary: {
            criticalCount: number;
            highCount: number;
            lowCount: number;
            mediumCount: number;
            noneCount: number;
            unknownCount: number;
        },
        vulnerabilities: Vulnerability[];
    }
}
