import "./list.scss"
import React from "react"
import {Renderer} from "@k8slens/extensions"
import {Vulnerability} from "./types";

const {
    Component: {
        Table,
        TableHead,
        TableRow,
        TableCell,
        Badge,
    }
} = Renderer;

interface Props {
    vulnerabilities: Vulnerability[];
}

const severityOrder = new Map([
    ["CRITICAL", 0],
    ["HIGH", 1],
    ["MEDIUM", 2],
    ["LOW", 3],
    ["UNKNOWN", 4]
])

const BySeverity = (v1: Vulnerability, v2: Vulnerability) => {
    return severityOrder.get(v1.severity) - severityOrder.get(v2.severity)
}

export class VulnerabilitiesList extends React.Component<Props> {

    getTableRow = (uid: string) => {
        const {vulnerabilities} = this.props;
        const vulnerability = vulnerabilities.find(item => item.getId() == uid);
        let avdURL: string;
        let vulnID = vulnerability.getId();

        if (vulnID.startsWith('CVE-')) {
            avdURL = `https://avd.aquasec.com/nvd/${vulnID}`.toLowerCase()
        } else if (vulnID.startsWith('RUSTSEC-')) {
            avdURL = `https://rustsec.org/advisories/${vulnID}`
        } else if (vulnID.startsWith('GHSA-')) {
            avdURL = `https://github.com/advisories/${vulnID}`
        } else if (vulnID.startsWith('TEMP-')) {
            avdURL = `https://security-tracker.debian.org/tracker/${vulnID}`
        } else {
            avdURL = `https://google.com/search?q=${vulnID}`
        }

        return (
            <TableRow key={vulnID} nowrap sortItem={vulnerability}>
                <TableCell className="vulnerabilityID">
                    <a target="_blank" href={avdURL}>{vulnID}</a>
                </TableCell>
                <TableCell>
                    <Badge className={"Badge severity-" + vulnerability.severity} small label={vulnerability.severity}/>
                </TableCell>
                <TableCell className="resource">{vulnerability.resource}</TableCell>
                <TableCell className="installedVersion">{vulnerability.installedVersion}</TableCell>
                <TableCell className="fixedVersion">{vulnerability.fixedVersion}</TableCell>
            </TableRow>
        );
    }

    render() {
        const {vulnerabilities} = this.props

        if (!vulnerabilities.length) {
            return null;
        }

        const virtual = vulnerabilities.length > 50;
        const sorted = vulnerabilities.sort(BySeverity)

        return (
            <div className="VulnerabilitiesList">
                <Table tableId="vulnerabilitiesTable"
                       selectable
                       virtual={virtual}
                       items={sorted}
                       getTableRow={this.getTableRow}
                >
                    <TableHead>
                        <TableCell className="vulnerabilityID">ID</TableCell>
                        <TableCell className="severity">Severity</TableCell>
                        <TableCell className="resource">Resource</TableCell>
                        <TableCell className="installedVersion">Installed Version</TableCell>
                        <TableCell className="fixedVersion">Fixed Version</TableCell>
                    </TableHead>
                    {
                        !virtual && sorted.map((vulnerability: Vulnerability) => this.getTableRow(vulnerability.getId()))
                    }
                </Table>
            </div>
        )
    }

}
