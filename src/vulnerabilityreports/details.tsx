import "./details.scss"
import {Renderer} from "@k8slens/extensions";
import React from "react";
import {ClusterVulnerabilityReport, Vulnerability, VulnerabilityReport} from "./types";
import {VulnerabilitiesList} from "./list";

const DANGER_STATUSES = ['CRITICAL', 'HIGH'];

export interface ClusterVulnerabilityReportDetailsProps extends Renderer.Component.KubeObjectDetailsProps<ClusterVulnerabilityReport> {
    showContainerStatus?: boolean
    showObjectMeta?: boolean
}

export class ClusterVulnerabilityReportDetails extends React.Component<ClusterVulnerabilityReportDetailsProps> {

    render() {
        const {object: report} = this.props;
        const {report: {vulnerabilities: items}} = report;

        const hasSomeProblem = items.some(vulnerability => DANGER_STATUSES.includes(vulnerability.severity));
        const vulnerabilities = items.map((vulnerability) => new Vulnerability(vulnerability))
        if (!report) return null;
        return (
            <div className="VulnerabilityReportDetails">
                {this.props.showContainerStatus &&
                <div className="pod-container-title">
                    <Renderer.Component.StatusBrick
                        className={hasSomeProblem ? 'error' : 'succeeded'}/>{report.metadata.labels['starboard.container.name']}
                </div>}

                {this.props.showObjectMeta &&
                <Renderer.Component.KubeObjectMeta
                    object={report}
                    hideFields={["uid", "resourceVersion", "selfLink"]}/>}

                <Renderer.Component.DrawerItem name="Image">
                    {report.getImageRef()}
                </Renderer.Component.DrawerItem>

                <Renderer.Component.DrawerItem name="Summary" className="summary" labelsOnly>
                    <Renderer.Component.Badge
                        className="Badge theme-critical"
                        label={report.report.summary.criticalCount}
                        tooltip="Critical"/>
                    <Renderer.Component.Badge
                        className="Badge theme-high"
                        label={report.report.summary.highCount}
                        tooltip="High"/>
                    <Renderer.Component.Badge
                        className="Badge theme-medium"
                        label={report.report.summary.mediumCount}
                        tooltip="Medium"/>
                    <Renderer.Component.Badge
                        className="Badge theme-low"
                        label={report.report.summary.lowCount}
                        tooltip="Low"/>
                    <Renderer.Component.Badge
                        className="Badge theme-unknown"
                        label={report.report.summary.unknownCount}
                        tooltip="Unknown"/>
                </Renderer.Component.DrawerItem>

                <Renderer.Component.DrawerTitle title={"Vulnerabilities"}/>

                <VulnerabilitiesList vulnerabilities={vulnerabilities}/>
            </div>
        )
    }
}

export interface VulnerabilityReportDetailsProps extends Renderer.Component.KubeObjectDetailsProps<VulnerabilityReport> {

    /*
     * Determines whether to display container name with a little rectangle.
     * If the rectangle is green there are no action. If it's red it means
     * that there are some critical or high vulnerabilities and it's a good
     * idea to check them out.
     */
    showContainerStatus?: boolean

    /*
     * Determines whether to display ObjectMeta section or not.
     * We want to display it in the generic VulnerabilityReport view.
     * However, we want to hide it when we list VulnerabilityReports
     * in the WorkloadVulnerabilities details pane.
     */
    showObjectMeta?: boolean
}

export class VulnerabilityReportDetails extends React.Component<VulnerabilityReportDetailsProps> {

    render() {
        const {object: report} = this.props;
        const {report: {vulnerabilities: items}} = report;

        const hasSomeProblem = items.some(vulnerability => DANGER_STATUSES.includes(vulnerability.severity));
        const vulnerabilities = items.map((vulnerability) => new Vulnerability(vulnerability))
        if (!report) return null;
        return (
            <div className="VulnerabilityReportDetails">
                {this.props.showContainerStatus &&
                <div className="pod-container-title">
                    <Renderer.Component.StatusBrick
                        className={hasSomeProblem ? 'error' : 'succeeded'}/>{report.metadata.labels['starboard.container.name']}
                </div>}

                {this.props.showObjectMeta &&
                <Renderer.Component.KubeObjectMeta
                    object={report}
                    hideFields={["uid", "resourceVersion", "selfLink"]}/>}

                <Renderer.Component.DrawerItem name="Image">
                    {report.getImageRef()}
                </Renderer.Component.DrawerItem>

                <Renderer.Component.DrawerItem name="Summary" className="summary" labelsOnly>
                    <Renderer.Component.Badge
                        className="Badge theme-critical"
                        label={report.report.summary.criticalCount}
                        tooltip="Critical"/>
                    <Renderer.Component.Badge
                        className="Badge theme-high"
                        label={report.report.summary.highCount}
                        tooltip="High"/>
                    <Renderer.Component.Badge
                        className="Badge theme-medium"
                        label={report.report.summary.mediumCount}
                        tooltip="Medium"/>
                    <Renderer.Component.Badge
                        className="Badge theme-low"
                        label={report.report.summary.lowCount}
                        tooltip="Low"/>
                    <Renderer.Component.Badge
                        className="Badge theme-unknown"
                        label={report.report.summary.unknownCount}
                        tooltip="Unknown"/>
                </Renderer.Component.DrawerItem>

                <Renderer.Component.DrawerTitle title={"Vulnerabilities"}/>

                <VulnerabilitiesList vulnerabilities={vulnerabilities}/>
            </div>
        )
    }
}
