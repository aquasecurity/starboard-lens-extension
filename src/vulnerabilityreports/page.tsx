import "./page.scss"
import {Renderer} from "@k8slens/extensions";
import React from "react";
import {ClusterVulnerabilityReport, VulnerabilityReport} from "./types";
import {clusterStore, store} from "./store";
import {Scanner} from "../starboard/types";

const {
    Component: {
        KubeObjectListLayout,
        Badge,
    }
} = Renderer;

enum sortBy {
    name = "name",
    namespace = "namespace",
    summary = "summary",
}

export class ClusterVulnerabilityReportPage extends React.Component<{ extension: Renderer.LensExtension }> {

    render() {
        return (
            <KubeObjectListLayout
                tableId="clusterVulnerabilityReportsTable"
                className="ClusterVulnerabilityReports" store={clusterStore}
                sortingCallbacks={{
                    [sortBy.name]: (report: ClusterVulnerabilityReport) => report.getName(),
                    [sortBy.summary]: (report: ClusterVulnerabilityReport) => [
                        report.report.summary.criticalCount,
                        report.report.summary.highCount,
                        report.report.summary.mediumCount,
                        report.report.summary.lowCount,
                        report.report.summary.unknownCount,
                    ],
                }}
                searchFilters={[
                    (report: ClusterVulnerabilityReport) => report.getSearchFields()
                ]}
                renderHeaderTitle="ClusterVulnerabilityReports"
                renderTableHeader={[
                    {title: "Name", className: "name", sortBy: sortBy.name},
                    {title: "Image", className: "repository"},
                    {title: "Summary", className: "summary", sortBy: sortBy.summary},
                    {title: "Scanner", className: "scanner"},
                ]}
                renderTableContents={(report: ClusterVulnerabilityReport) => [
                    renderName(report.getName()),
                    renderImage(report),
                    [
                        renderSeverity("CRITICAL", report.report.summary.criticalCount),
                        renderSeverity("HIGH", report.report.summary.highCount),
                        renderSeverity("MEDIUM", report.report.summary.mediumCount),
                        renderSeverity("LOW", report.report.summary.lowCount),
                        renderSeverity("UNKNOWN", report.report.summary.unknownCount),
                    ],
                    renderScanner(report.report.scanner),
                ]}
            />
        )
    }
}


export class VulnerabilityReportPage extends React.Component<{ extension: Renderer.LensExtension }> {

    render() {
        return (
            <KubeObjectListLayout
                tableId="vulnerabilityReportsTable"
                className="VulnerabilityReports" store={store}
                sortingCallbacks={{
                    [sortBy.name]: (report: VulnerabilityReport) => report.getName(),
                    [sortBy.namespace]: (report: VulnerabilityReport) => report.metadata.namespace,
                    [sortBy.summary]: (report: VulnerabilityReport) => [
                        report.report.summary.criticalCount,
                        report.report.summary.highCount,
                        report.report.summary.mediumCount,
                        report.report.summary.lowCount,
                        report.report.summary.unknownCount,
                    ],
                }}
                searchFilters={[
                    (report: VulnerabilityReport) => report.getSearchFields()
                ]}
                renderHeaderTitle="VulnerabilityReports"
                renderTableHeader={[
                    {title: "Name", className: "name", sortBy: sortBy.name},
                    {title: "Namespace", className: "namespace", sortBy: sortBy.namespace},
                    {title: "Image", className: "repository"},
                    {title: "Summary", className: "summary", sortBy: sortBy.summary},
                    {title: "Scanner", className: "scanner"},
                ]}
                renderTableContents={(report: VulnerabilityReport) => [
                    renderName(report.getName()),
                    report.metadata.namespace,
                    renderImage(report),
                    [
                        renderSeverity("CRITICAL", report.report.summary.criticalCount),
                        renderSeverity("HIGH", report.report.summary.highCount),
                        renderSeverity("MEDIUM", report.report.summary.mediumCount),
                        renderSeverity("LOW", report.report.summary.lowCount),
                        renderSeverity("UNKNOWN", report.report.summary.unknownCount),
                    ],
                    renderScanner(report.report.scanner),
                ]}
            />
        )
    }
}

function renderName(name: string) {
    return (
        <Badge flat expandable={false} key="name" label={name} tooltip={name}/>
    )
}

function renderScanner(scanner: Scanner) {
    return scanner.name + " " + scanner.version
}

function renderImage(report: VulnerabilityReport) {
    const imageRef = report.getImageRef()
    return (
        <Badge flat expandable={false} key="imageRef" label={imageRef} tooltip={imageRef}/>
    )
}

function renderSeverity(severity: string, count: number) {
    if (count > 0) {
        return (
            <Badge className={"Badge severity-" + severity} key="severity" small label={count} tooltip={severity + ": " + count}/>
        )
    } else {
        return (
            <Badge className="Badge" key="severity" small label={count}/>
        )
    }
}
